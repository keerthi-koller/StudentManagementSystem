package com.jsp.studentmanagementsystem1.serviceimpl;

import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.jsp.studentmanagementsystem1.dto.StudentRequest;
import com.jsp.studentmanagementsystem1.dto.StudentResponse;
import com.jsp.studentmanagementsystem1.entity.Student;
import com.jsp.studentmanagementsystem1.exception.StudentNotFoundByIdException;
import com.jsp.studentmanagementsystem1.repository.StudentRepo;
import com.jsp.studentmanagementsystem1.service.StudentService;
import com.jsp.studentmanagementsystem1.util.ResponseStructure;

@Service
public class StudentServiceImpl implements StudentService{
	
	@Autowired
	private StudentRepo studentRepo;
	

	@Override
	public ResponseEntity<ResponseStructure<StudentResponse>> saveStudent(StudentRequest studentRequest) {

		Student student = new Student();
		
		student.setStudentName(studentRequest.getStudentName());
		student.setStudentPhNo(studentRequest.getStudentPhNo());
		student.setStudentEmail(studentRequest.getStudentEmail());
		student.setStudentGrade(studentRequest.getStudentGrade());
		
		Student save = studentRepo.save(student);
		
		StudentResponse studentResponse = new StudentResponse();
		studentResponse.setStudentId(save.getStudentId());
		studentResponse.setStudentName(save.getStudentName());
		studentResponse.setStudentGrade(save.getStudentGrade());
		
		ResponseStructure<StudentResponse> structure = new ResponseStructure<StudentResponse>();
		structure.setStatus(HttpStatus.CREATED.value());
		structure.setMessage("Student data saved successfully");
		structure.setData(studentResponse);
		
		return new ResponseEntity<ResponseStructure<StudentResponse>>(structure, HttpStatus.CREATED);
	}

	@Override
	public ResponseEntity<ResponseStructure<StudentResponse>> updateStudent(StudentRequest studentRequest, int studentId) {

//		student---contains new data don't know which data is new whole data is new
		Optional<Student> optional = studentRepo.findById(studentId);	//having old data
		
		Student student11 = new Student();
		
		if (optional.isPresent())
		{
			Student student2 = optional.get();
			student11.setStudentId(student2.getStudentId());
			student11.setStudentName(studentRequest.getStudentName());
			student11.setStudentPhNo(studentRequest.getStudentPhNo());
			student11.setStudentEmail(studentRequest.getStudentEmail());
			student11.setStudentGrade(studentRequest.getStudentGrade());
			
//			studentRepo.save(student);
//			return new ResponseEntity<Student>(student, HttpStatus.OK);
			Student save = studentRepo.save(student11);
			
			StudentResponse studentResponse = new StudentResponse();
			studentResponse.setStudentId(save.getStudentId());
			studentResponse.setStudentName(save.getStudentName());
			studentResponse.setStudentGrade(save.getStudentGrade());
			
			ResponseStructure<StudentResponse> structure = new ResponseStructure<StudentResponse>();
			structure.setStatus(HttpStatus.OK.value());
			structure.setMessage("Student data updated successfully");
			structure.setData(studentResponse);
			
			return new ResponseEntity<ResponseStructure<StudentResponse>>(structure, HttpStatus.OK);
		}
		else
		{
			throw new StudentNotFoundByIdException("Student of this id not found!!");
		}
	}

	@Override
	public ResponseEntity<ResponseStructure<Student>> deleteStudent(int studentId) {
		Optional<Student> optional = studentRepo.findById(studentId);
		
		if (optional.isPresent())
		{
			Student student = optional.get();
			studentRepo.delete(student);
			
			ResponseStructure<Student> structure = new ResponseStructure<Student>();
			structure.setStatus(HttpStatus.OK.value());
			structure.setMessage("Student data deleted successfully");
			structure.setData(student);
			
			return new ResponseEntity<ResponseStructure<Student>> (structure, HttpStatus.OK);
		}
		else
		{
			throw new StudentNotFoundByIdException("Failed to delete the Student!!");
		}
	}

	@Override
	public ResponseEntity<ResponseStructure<Student>> findStudentById(int studentId) {
		Optional<Student> optional = studentRepo.findById(studentId);
		
		if (optional.isPresent())
		{
			Student student = optional.get();
			
			ResponseStructure<Student> structure = new ResponseStructure<Student>();
			structure.setStatus(HttpStatus.FOUND.value());
			structure.setMessage("Student data found successfully");
			structure.setData(student);
			
			return new ResponseEntity<ResponseStructure<Student>> (structure, HttpStatus.FOUND);
		}
		else
		{
			throw new StudentNotFoundByIdException("Student of this id not found!!");
		}
	}

	@Override
	public ResponseEntity<List<Student>> findAllStudents() {
		List<Student> list = studentRepo.findAll();
		
//		ResponseStructure<Student> structure = new ResponseStructure<Student>();
//		structure.setStatus(HttpStatus.FOUND.value());
//		structure.setMessage("Student data fetched successfully");
//		structure.setData(list);
		
		return new ResponseEntity<List<Student>>(list, HttpStatus.FOUND);
	}

	@Override
	public ResponseEntity<ResponseStructure<StudentResponse>> findByEmail (String studentEmail) {

		Student student = studentRepo.findByStudentEmail(studentEmail);
		if (student != null)
		{
			StudentResponse studentResponse = new StudentResponse();
			
			studentResponse.setStudentId(student.getStudentId());
			studentResponse.setStudentName(student.getStudentName());
			studentResponse.setStudentGrade(student.getStudentGrade());
			
			ResponseStructure<StudentResponse> structure = new ResponseStructure<StudentResponse>();
			
			structure.setMessage("Student found based on Email");
			structure.setStatus(HttpStatus.FOUND.value());
			structure.setData(studentResponse);
			
			return new ResponseEntity<ResponseStructure<StudentResponse>> (structure, HttpStatus.FOUND);
			
		}
		else
		{
//			throw new StudentNotFoundByEmail ("Failed to find the Student !!");
			return null;//comment after creating the exception class
		}
	}

	@Override
	public ResponseEntity<ResponseStructure<StudentResponse>> findByPhNo(String studentPhNo) {

		Student student = studentRepo.findByStudentPhNo(studentPhNo);
		if (student != null)
		{
			StudentResponse studentResponse = new StudentResponse();
			
			studentResponse.setStudentId(student.getStudentId());
			studentResponse.setStudentName(student.getStudentName());
			studentResponse.setStudentGrade(student.getStudentGrade());
			
			ResponseStructure<StudentResponse> structure = new ResponseStructure<StudentResponse>();
			
			structure.setMessage("Student found based on PhNo");
			structure.setStatus(HttpStatus.FOUND.value());
			structure.setData(studentResponse);
			
			return new ResponseEntity<ResponseStructure<StudentResponse>> (structure, HttpStatus.FOUND);
		}
		else
		{
//			throw new StudentNotFoundByPhNo ("Failed to find the Student !!");
			return null;
		}
	}
	
}
