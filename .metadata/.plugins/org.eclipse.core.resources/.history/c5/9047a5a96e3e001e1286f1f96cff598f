package com.jsp.studentmanagementsystem1.exception;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.FieldError;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

import com.jsp.studentmanagementsystem1.util.ErrorStructure;

@RestControllerAdvice
public class ApplicationExceptionHandler  {
	
//	@Override
//	protected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException ex,
//			HttpHeaders headers, HttpStatusCode status, WebRequest request) {
//
//		List<ObjectError> allErrors = ex.getAllErrors();
//		Map<String, String> map = new HashMap<String, String>();
//		
//		for (ObjectError error : allErrors)
//		{
//			FieldError fieldError = (FieldError)error;
//			
//			String message = fieldError.getDefaultMessage();
//			String field = fieldError.getField();
////			Object object = fieldError.getRejectedValue();
////			String objectName = fieldError.getObjectName();
////			String code = fieldError.getCode();
//			
//			map.put(field, message);
//			
//		}
//		
//	}
	
	@ExceptionHandler
	public ResponseEntity<ErrorStructure> studentNotFoundById (StudentNotFoundByIdException ex)
	{
		ErrorStructure structure = new ErrorStructure();
		structure.setStatus(HttpStatus.NOT_FOUND.value());
		structure.setMessage(ex.getMessage());
		structure.setRootCause("Student is not present with the requested Id!!");
		
		return new ResponseEntity<ErrorStructure> (structure, HttpStatus.NOT_FOUND);
	}
	
	@ExceptionHandler
	public ResponseEntity<ErrorStructure> studentNotFoundByEmail (StudentNotFoundByEmailException ex)
	{
		ErrorStructure structure = new ErrorStructure();
		structure.setStatus(HttpStatus.NOT_FOUND.value());
		structure.setMessage(ex.getMessage());
		structure.setRootCause("STudent is not present with the requested Id!!");
		
		return new ResponseEntity<ErrorStructure> (structure, HttpStatus.NOT_FOUND);
	}
	
	@ExceptionHandler
	public ResponseEntity<ErrorStructure> studentNotFoundByPhNo (StudentNotFoundByPhNoException ex)
	{
		ErrorStructure structure = new ErrorStructure();
		structure.setMessage(ex.getMessage());
		structure.setRootCause("Student is not present with the requested Id!!");
		structure.setStatus(HttpStatus.NOT_FOUND.value());
		
		return new ResponseEntity<ErrorStructure> (structure, HttpStatus.NOT_FOUND);
	}
	
	@ExceptionHandler
	public ResponseEntity<ErrorStructure> studentEmailsNotFoundBasedOnGrade (StudentEmailsNotFoundBasedOnGradeException ex)
	{
		ErrorStructure structure = new ErrorStructure();
		structure.setMessage(ex.getMessage());
		structure.setRootCause("Student is not present with the requested Grade!!");
		structure.setStatus(HttpStatus.NOT_FOUND.value());
		
		return new ResponseEntity<ErrorStructure> (structure, HttpStatus.NOT_FOUND);
	}
}
